#!/bin/sh

###############################################################################
#
# S.M.A.R.T.HTML v2.0
#
# (c) 2020 gSpot (https://github.com/gSpotx2f/smarthtml)
#
###############################################################################

export PATH="/opt/bin:/opt/sbin:/opt/usr/bin:/usr/sbin:/usr/bin:/sbin:/bin"
export NAME="smarthtml"
export LANG="en_US.UTF-8"
export LANGUAGE="en"
export HOSTNAME="$HOSTNAME"

####################### Platform-specific settings ############################

### External config
CONFIG_FILE="/opt/etc/${NAME}.conf"
### Data directory
SCRIPT_DATA_DIR="/opt/var/${NAME}"
### Email script
#MAILER_SCRIPT="/opt/var/smarthtml_mailer_sendmail"
MAILER_SCRIPT="/opt/var/smarthtml_mailer_msmtp"
### HTML directory
HTML_DIR="/opt/share/www"
### URL path for CGI module
CGI_MODULE_WWW_PATH="/cgi-bin/${NAME}.cgi"

############################ Default settings #################################

### Devices (example for multiple devices: DEVICES="/dev/sda /dev/sdb /dev/sdc")
export DEVICES="/dev/sda"
### Excluded S.M.A.R.T. attributes (ex. vendor specific or unimportant attributes)
export EXCLUDED_SMART_ATTRS="211 212 213 214 215 216 217 230"
### Disabled S.M.A.R.T. attributes (Power On Hours, etc...)
export DISABLED_SMART_ATTRS="4 9 12"
### Critical attributes
export CRITICAL_SMART_ATTRS="5 11 183 184 187 196 197 198 200 202 220"
### Reverse attributes: increase is good, decrease is bad (Throughput Performance, etc...)
export REV_SMART_ATTRS="2 8"
### Temperature attributes
export TEMP_SMART_ATTRS="190 194"
### Default temperature warning
export TEMP_ALERT_DEFAULT=60
### Default temperature critical
export TEMP_CRITICAL_DEFAULT=80
### Auto reset warnings (0 - disable; 1 - enable)
export WARN_AUTO_RESET=1
export WARN_AUTO_RESET_DAYS=30
### Show SCT temperature history (0 - disable; 1 - enable)
export SCT_TEMP_HISTORY=1
### Write S.M.A.R.T. changes to device log (0 - only critical warnings; 1 - all changes)
export LOG_ALL=0
### Partitions info - fdisk support (0 - disable; 1 - enable)
export USE_FDISK=1
### Write critical warnings to syslog (0 - disable; 1 - enable)
export USE_LOGGER=1
### E-mail support for critical warnings (0 - disable; 1 - enable)
export USE_MAIL=0
### RRD support (0 - disable; 1 - enable)
export USE_RRD=1
### RRD database preset (1 - 30mins; 2 - 1hour; 3 - 3hours; 4 - 6hours; 5 - 12hours; 6 - 24hours)
export RRD_DB_PRESET=3
### S.M.A.R.T. attributes for RRD
export RRD_SMART_ATTRS="3 190 194"  # Spin-up time, temperature
### For these attributes, the difference in values (last change) will be written to the RRD
export RRD_SMART_ATTRS_DIFF=""
### Default graph
export RRD_SMART_ATTRS_DEF_GRAPH="190 194"
### CGI module smarthtml.cgi (0 - disable; 1 - enable)
export USE_CGI_MODULE=0

############################### Configuration #################################

[ -f "$CONFIG_FILE" ] && . "$CONFIG_FILE"

AWK_CMD="awk"

DF_CMD="df"
DF_PARAMS="-TPh"

SMARTCTL_CMD=`which smartctl`
if [ $? -ne 0 ]; then
    echo " Error! smartctl doesn't exists..." >&2
    exit 1
fi
SMARTCTL_PARAMS="-iAHl scttemp -l error -l devstat --json=g"

FDISK_CMD=`which fdisk`
if [ $USE_FDISK = "1" -a $? -ne 0 ]; then
    echo " Error! fdisk doesn't exists..." >&2
    USE_FDISK=0
fi
FDISK_PARAMS="-lo Device,Start,End,Sectors,Size,Type"
# BSD partitions
#FDISK_PARAMS="-lo Slice,Start,End,Sectors,Size,Type"

export LOGGER_CMD=`which logger`
if [ $USE_LOGGER = "1" -a $? -ne 0 ]; then
    echo " Error! logger doesn't exists..." >&2
    USE_LOGGER=0
fi
export LOGGER_PARAMS="-t \"${NAME}\" -p user.warning"

export RRDTOOL_CMD=`which rrdtool`
if [ $USE_RRD = "1" -a $? -ne 0 ]; then
    echo " Error! rrdtool doesn't exists..." >&2
    USE_RRD=0
fi

DB_DIR="${SCRIPT_DATA_DIR}/db"
LOG_DIR="${SCRIPT_DATA_DIR}/log"
export MTA_MSG_FILE="${SCRIPT_DATA_DIR}/email"
export HTML_OUTPUT="${HTML_DIR}/smart.html"
RRD_DB_DIR="${SCRIPT_DATA_DIR}/rrd"
RRD_DB_EXT="rrd"
RRD_GRAPH_DIR="$HTML_DIR"
RRD_GRAPH_WWW_PATH="."
RRD_GRAPH_TYPE="PNG"
RRD_GRAPH_EXT="png"
RRD_GRAPH_WIDTH=790
RRD_GRAPH_HEIGHT=260
RRD_BG_COLOR="#FFFFFF"
RRD_FONT_COLOR="#434E58"
RRD_GRAPH_COLOR_TEMP_WARN="#FFA500"
RRD_GRAPH_COLOR_TEMP_CRITICAL="#FF838B"
RRD_GRAPH_COLOR_AREA="#C1D6DE"
RRD_GRAPH_COLOR_LINE="#5F6F7C"
RRD_GRAPH_COLOR_BACK="$RRD_BG_COLOR"
RRD_GRAPH_COLOR_SHADEA="$RRD_BG_COLOR"
RRD_GRAPH_COLOR_SHADEB="$RRD_BG_COLOR"
RRD_GRAPH_COLOR_CANVAS="$RRD_BG_COLOR"
RRD_GRAPH_COLOR_FONT="$RRD_FONT_COLOR"
RRD_GRAPH_COLOR_MGRID="#434E58"
RRD_GRAPH_COLOR_GRID="#8D9DAA"
RRD_GRAPH_COLOR_AXIS="$RRD_FONT_COLOR"
RRD_GRAPH_COLOR_FRAME="$RRD_FONT_COLOR"
RRD_GRAPH_COLOR_ARROW="$RRD_FONT_COLOR"
RRD_RRD_GRAPH_FONT_MAIN=9
RRD_RRD_GRAPH_FONT_TITLE=11

case $RRD_DB_PRESET in
    1)  ### 30m
        ### cron example:   0,30 * * * *
        RRD_DB_STEP=1800
        RRD_RRA_SET="RRA:MAX:0.5:1:336 RRA:MAX:0.5:2:744 RRA:MAX:0.5:48:365 RRA:MAX:0.5:240:365"
        RRD_GRAPH_START="-7days -30days -365days"
        #RRD_GRAPH_START="-14days -30days -365days -1825days"    # + 5 years graph
        RRD_GRAPH_END="now"
        WARN_AUTO_RESET_COUNT=48
    ;;
    2)  ### 1h
        ### cron example:   10 * * * *
        RRD_DB_STEP=3600
        RRD_RRA_SET="RRA:MAX:0.5:1:744 RRA:MAX:0.5:24:365 RRA:MAX:0.5:120:365"
        RRD_GRAPH_START="-7days -30days -365days"
        #RRD_GRAPH_START="-14days -30days -365days -1825days"    # + 5 years graph
        RRD_GRAPH_END="now"
        WARN_AUTO_RESET_COUNT=24
    ;;
    3)  ### 3h
        ### cron example:   10 */3 * * *
        RRD_DB_STEP=10800
        RRD_RRA_SET="RRA:MAX:0.5:1:248 RRA:MAX:0.5:8:365 RRA:MAX:0.5:40:365"
        RRD_GRAPH_START="-14days -30days -365days"
        #RRD_GRAPH_START="-14days -30days -365days -1825days"    # + 5 years graph
        RRD_GRAPH_END="now"
        WARN_AUTO_RESET_COUNT=8
    ;;
    4)  ### 6h
        ### cron example:   10 */6 * * *
        RRD_DB_STEP=21600
        RRD_RRA_SET="RRA:MAX:0.5:1:248 RRA:MAX:0.5:4:365 RRA:MAX:0.5:20:365"
        RRD_GRAPH_START="-14days -30days -365days"
        #RRD_GRAPH_START="-14days -30days -365days -1825days"    # + 5 years graph
        RRD_GRAPH_END="now"
        WARN_AUTO_RESET_COUNT=4
    ;;
    5)  ### 12h
        ### cron example:   10 0,12 * * *
        RRD_DB_STEP=43200
        RRD_RRA_SET="RRA:MAX:0.5:1:248 RRA:MAX:0.5:2:365 RRA:MAX:0.5:10:365"
        RRD_GRAPH_START="-14days -30days -365days"
        #RRD_GRAPH_START="-14days -30days -365days -1825days"    # + 5 years graph
        RRD_GRAPH_END="now"
        WARN_AUTO_RESET_COUNT=2
    ;;
    *)  ### 24h
        ### cron example:   10 0 * * *
        RRD_DB_STEP=86400
        RRD_RRA_SET="RRA:MAX:0.5:1:365 RRA:MAX:0.5:5:365"
        RRD_GRAPH_START="-14days -30days -365days"
        #RRD_GRAPH_START="-14days -30days -365days -1825days"    # + 5 years graph
        RRD_GRAPH_END="now"
        WARN_AUTO_RESET_COUNT=1
    ;;
esac
RRD_INTERVAL=$(($RRD_DB_STEP * 2))
export WARN_AUTO_RESET_COUNT=$(($WARN_AUTO_RESET_COUNT * $WARN_AUTO_RESET_DAYS))

################################# Functions ###################################

Help() {
cat << EOF
Usage: `basename $0` [norrd|resetwarn|resetcount|makerrdgraph|mailtest|--help]
        norrd : Update SMART data only (doesn't call rrdtool update) (if USE_RRD is 1)
        resetwarn : Reset warnings
        resetcount : Reset change counters
        makerrdgraph : Call rrdtool graph (if USE_RRD is 1)
        mailtest : Send the test email (if USE_MAIL is 1)
        -h|--help : This message
Examples:
        `basename $0`
        `basename $0` norrd
        `basename $0` resetwarn
        `basename $0` resetcount
        `basename $0` makerrdgraph
        `basename $0` mailtest

EOF
    exit 0
}

MakeHtmlHeader() {
    local _i
cat << EOF > $HTML_OUTPUT
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>S.M.A.R.T.HTML</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <script async="false">
        var startSuffArray = [];
        var DISABLED_SMART_ATTRS = [];
        var RRD_SMART_ATTRS = [];
        var RRD_SMART_ATTRS_DEF_GRAPH = [];
        var RRD_SMART_ATTRS_DIFF = [];
        var RRD_DB_STEP = ${RRD_DB_STEP};
        var SCT_DEVICES_ARRAY = [];
        var RRD_GRAPH_WWW_PATH = '${RRD_GRAPH_WWW_PATH}';
        var RRD_GRAPH_EXT = '${RRD_GRAPH_EXT}';
        var USE_CGI_MODULE = ${USE_CGI_MODULE};
        var CGI_MODULE_WWW_PATH = '${CGI_MODULE_WWW_PATH}';
        var showAlert = 0;
EOF

    for _i in $RRD_GRAPH_START
    do
        echo "        startSuffArray.push('${_i}');" >> $HTML_OUTPUT
    done

    for _i in $DISABLED_SMART_ATTRS
    do
        echo "        DISABLED_SMART_ATTRS.push('${_i}');" >> $HTML_OUTPUT
    done

    for _i in $RRD_SMART_ATTRS
    do
        echo "        RRD_SMART_ATTRS.push('${_i}');" >> $HTML_OUTPUT
    done

    for _i in $RRD_SMART_ATTRS_DIFF
    do
        echo "        RRD_SMART_ATTRS_DIFF.push('${_i}');" >> $HTML_OUTPUT
    done

    for _i in $RRD_SMART_ATTRS_DEF_GRAPH
    do
        echo "        RRD_SMART_ATTRS_DEF_GRAPH.push('${_i}');" >> $HTML_OUTPUT
    done

cat << EOF >> $HTML_OUTPUT
    </script>
    <script src="main.js"></script>
    <noscript><p class="center"><strong>You need to enable JavaScript</strong></p></noscript>
    <div id="main-content">
        <nav id="tabs-nav"></nav>
        <div class="tabs-container">
EOF
}

MakeHtmlFooter() {
cat << EOF >> $HTML_OUTPUT
        </div>
    </div>
    <footer>
    </footer>
</body>
</html>
EOF
}

GetDateString() {
    date +%Y"."%m"."%d" "%H":"%M":"%S
}

ResetSMARTDB() {
    [ -f "$1" ] || exit 1

    $AWK_CMD -v TYPE=$2 '{
        if(TYPE == "warn") {
            printf "0 %s %s", $2, $3;
        } else {
            printf "%s 0 0", $1;
        };
            print " " $4, $5, $6;
        }' $1 > ${1}.tmp && mv -f ${1}.tmp $1
}

ResetSMARTDBAll() {
    local _device_path _device _db_file

    for _device_path in $DEVICES
    do
        _device=`echo "$_device_path" | $AWK_CMD -F "/" '{print $NF}'`
        _db_file="${DB_DIR}/${_device}"
        [ -f "$_db_file" ] || continue
        ResetSMARTDB $_db_file $1
    done
}

MakeRRDDB() {
    if [ -e "$1" ]; then
        echo " MakeRRDDB Error! ${1} is already exists..." >&2
    else
        local _attr

        eval $(printf "%s create %s -s %s " $RRDTOOL_CMD $1 $RRD_DB_STEP
        for _attr in $RRD_SMART_ATTRS
        do
            printf "DS:%s:GAUGE:%s:U:U " "smart${_attr}" $RRD_INTERVAL
        done
        printf "${RRD_RRA_SET}\n")

        if [ $? -ne 0 ]; then
            echo " MakeRRDDB Error! ${1} doesn't created..." >&2
        else
            echo " + RRD DB ${1} was created..."
        fi

    fi
}

FillRRDDB() {
    if [ -e "$1" ]; then

        eval $(echo "$RRD_SMART_ATTRS" | $AWK_CMD -v RRDDB_FILE=$1 '

            function makeRRDStringPart(value,  _attr_value) {
                for(i = 1; i <= NF; i++) {
                    _attr_value = (length(ENVIRON["smart" $i]) == 0) ? 0 : ENVIRON["smart" $i];
                    printf "%s%s", ((value == 0) ? "smart" $i : _attr_value), ((i == NF) ? "" : ":");
                };
            };

            {
                printf "%s update %s -t ", ENVIRON["RRDTOOL_CMD"], RRDDB_FILE;
                makeRRDStringPart(0);
                printf " N:";
                makeRRDStringPart(1);
                printf "\n";
                exit 0;
            }')

    else
        echo " FillRRDDB Error! ${1} doesn't exists..." >&2
    fi
}

MakeRRDGraph() {
    if [ -e "$1" ]; then
        local _attr _attr_name _graphstart _rrd_graph_file _units= _graph_attrs= _temp_w= _temp_c= _hrule_w= _hrule_c=

        local $($AWK_CMD '/^(tw|tc)/ {
            if($0 ~ /^tw/) {
                printf "_temp_w=%s ", $2;
            } else if($0 ~ /^tc/) {
                printf "_temp_c=%s ", $2;
            };
        }' "${DB_DIR}/${2}")

        if [ "$_temp_w" = "" ]; then
            _temp_w=$TEMP_ALERT_DEFAULT
        fi
        if [ "$_temp_c" = "" ]; then
            _temp_c=$TEMP_CRITICAL_DEFAULT
        fi

        for _attr in $RRD_SMART_ATTRS
        do

            if [ "$($AWK_CMD -v ATTR=$_attr '($5 == ATTR) {print $5}' "${DB_DIR}/${2}")" != "$_attr" ]; then
                continue
            fi

            _attr_name="smart${_attr}"

            if [ "$_attr" = "194" -o "$_attr" = "190" ]; then
                _units="C"
                _hrule_w="HRULE:${_temp_w}${RRD_GRAPH_COLOR_TEMP_WARN}:Warning(${_temp_w})"
                _hrule_c="HRULE:${_temp_c}${RRD_GRAPH_COLOR_TEMP_CRITICAL}:Critical(${_temp_c})"
            else
                _units="Units"
                _hrule_w=""
                _hrule_c=""
            fi

            for _graphstart in $RRD_GRAPH_START
            do
                _rrd_graph_file="${RRD_GRAPH_DIR}/${2}_${_attr}_${_graphstart}.${RRD_GRAPH_EXT}"

                $RRDTOOL_CMD graph $_rrd_graph_file --force-rules-legend \
                --slope-mode \
                --watermark "`GetDateString`" \
                --width $RRD_GRAPH_WIDTH \
                --height $RRD_GRAPH_HEIGHT \
                --start "$_graphstart" \
                --end "$RRD_GRAPH_END" \
                -v "$_units" \
                --imgformat "$RRD_GRAPH_TYPE" \
                --color BACK${RRD_GRAPH_COLOR_BACK} \
                --color SHADEA${RRD_GRAPH_COLOR_SHADEA} \
                --color SHADEB${RRD_GRAPH_COLOR_SHADEB} \
                --color CANVAS${RRD_GRAPH_COLOR_CANVAS} \
                --color FONT${RRD_GRAPH_COLOR_FONT} \
                --color MGRID${RRD_GRAPH_COLOR_MGRID} \
                --color GRID${RRD_GRAPH_COLOR_GRID} \
                --color AXIS${RRD_GRAPH_COLOR_AXIS} \
                --color FRAME${RRD_GRAPH_COLOR_FRAME} \
                --color ARROW${RRD_GRAPH_COLOR_ARROW} \
                --font "TITLE:${RRD_RRD_GRAPH_FONT_TITLE}:" \
                --font "AXIS:${RRD_RRD_GRAPH_FONT_MAIN}:" \
                --font "UNIT:${RRD_RRD_GRAPH_FONT_MAIN}:" \
                --font "LEGEND:${RRD_RRD_GRAPH_FONT_MAIN}:" \
                DEF:attr_ds=${1}:${_attr_name}:MAX \
                VDEF:max=attr_ds,MAXIMUM \
                VDEF:min=attr_ds,MINIMUM \
                VDEF:avg=attr_ds,AVERAGE \
                VDEF:last=attr_ds,LAST \
                AREA:attr_ds${RRD_GRAPH_COLOR_AREA}:${_attr_name} \
                LINE1:attr_ds${RRD_GRAPH_COLOR_LINE}: \
                GPRINT:max:"Max = %1.0lf" \
                GPRINT:min:"Min = %1.0lf" \
                GPRINT:avg:"Avg = %1.1lf" \
                GPRINT:last:"Last = %1.0lf  " \
                ${_hrule_w} ${_hrule_c} > /dev/null
            done

        done
    else
        echo " MakeRRDGraph Error! ${1} doesn't exists..." >&2
    fi
}

MakePartitionsInfo() {
    local _partition

    for _partition in $($FDISK_CMD $FDISK_PARAMS $1 | $AWK_CMD '
        BEGIN {
            partitions_str = "";
            disk_info_html = "";
            partition_html = "";
            fields = 0;
        }

        function concatRestFields(target_field, sep,  _rest, _str) {
            _rest = NF - target_field;
            for(i = 0; i < _rest; i++) {
                _str = _str sep $(NF - i);
            };
            $target_field = $target_field _str;
        };

        {
            is_header = 0;
            if($0 ~ /^([ ]*(Device|Slice|[\057]dev[\057]))/) {
                if($0 ~ /^[ ]*(Device|Slice)/) {
                    fields = NF;
                    is_header = 1;
                }
                else {
                    partitions_str = (length(partitions_str) == 0) ? $1 : partitions_str " " $1;
                    concatRestFields(fields, " ");
                };

                partition_html = (is_header == 1) ? partition_html "<thead><tr>" :
                    partition_html "<tr>";
                curr_fields = (NF < fields) ? NF : fields;

                for(i = 1; i <= curr_fields; i++) {
                    partition_html = (is_header == 1) ? partition_html "<th>" $i "</th>" :
                        partition_html "<td>" $i "</td>";
                };

                partition_html = (is_header == 1) ? partition_html "</tr></thead><tbody>" :
                    partition_html "</tr>";
            }
            else if(length($0) > 1) {
                split($0, str_array, ":");
                disk_info_html = disk_info_html "<tr><td>" str_array[1] ":</td><td>" str_array[2] "</td></tr>";
            };
        }

        END {
            printf "<section id=\"fdisk\"> \
                <header class=\"section-header\">Disk</header> \
                <table class=\"two-cols-table\"> \
                    <tbody>%s</tbody> \
                </table></section>\n \
            <section id=\"partitions\"> \
                <header class=\"section-header\">Partitions</header> \
                <table>%s</tbody></table></section>\n \
            <section id=\"filesystems\"> \
                <header class=\"section-header\">Filesystems</header> \
                    <table><thead><tr> \
                        <th>Filesystem</th> \
                        <th>Type</th> \
                        <th>Size</th> \
                        <th>Used</th> \
                        <th>Available</th> \
                        <th>Use %%</th> \
                        <th>Mounted on</th> \
                    </tr></thead><tbody>",
            disk_info_html, partition_html >>ENVIRON["HTML_OUTPUT"];

            # STDOUT (to df)
            printf "%s", partitions_str;
        }')
    do
        $DF_CMD $DF_PARAMS $_partition 2> /dev/null | $AWK_CMD -v PARTITION=$_partition '

            function concatRestFields(target_field, sep,  _rest, _str) {
                _rest = NF - target_field;
                for(i = 0; i < _rest; i++) {
                    _str = _str sep $(NF - i);
                };
                $target_field = $target_field _str;
            };

            (NR == 2) {
                concatRestFields(7, " ");

                fs_html = "";
                for(i = 1; i <= 7; i++) {
                    raw_number = $i;
                    sub(",", ".", raw_number);
                    sub(/[^0-9.]+/, "", raw_number);
                    data_attrs = (i == 6) ? " data-bar=\"" raw_number "\"" : "";
                    fs_html = fs_html "<td" data_attrs ">" ((i == 1 && $i != PARTITION) ?
                        $i " (" PARTITION ")" : $i) "</td>";
                };

                printf "<tr>%s</tr>", fs_html;
            }' >> $HTML_OUTPUT
    done
    echo "</tbody></table></section>" >> $HTML_OUTPUT
}

MakeDevicesInfo() {
    local _devices_counter=0 _device_path _device _db_file _log_file _device_error=0 _attr

    for _device_path in $DEVICES
    do
        [ -b "$_device_path" ] || continue
        _device=`echo "$_device_path" | $AWK_CMD -F "/" '{print $NF}'`
        _db_file="${DB_DIR}/${_device}"
        _log_file="${LOG_DIR}/${_device}.log"

        export $($SMARTCTL_CMD $SMARTCTL_PARAMS $_device_path | $AWK_CMD \
        -v LOG_FILE=$_log_file \
        -v DB_FILE=$_db_file \
        -v DB_FILE_TMP=${_db_file}.tmp \
        -v DATE="`GetDateString`" \
        -v DEVICE_PATH=$_device_path \
        -v DEVICE=$_device \
        -v DEVICE_NUM=$_devices_counter '
        BEGIN {

            PROCINFO["sorted_in"]="@ind_str_asc";

            makeConstArray(ENVIRON["EXCLUDED_SMART_ATTRS"], smart_exclude_attrs, " ");
            makeConstArray(ENVIRON["DISABLED_SMART_ATTRS"], smart_disabled_attrs, " ");
            makeConstArray(ENVIRON["CRITICAL_SMART_ATTRS"], smart_critical_attrs, " ");
            makeConstArray(ENVIRON["TEMP_SMART_ATTRS"], smart_temp_attrs, " ");
            makeConstArray(ENVIRON["REV_SMART_ATTRS"], smart_rev_attrs, " ");
            makeConstArray(ENVIRON["RRD_SMART_ATTRS_DIFF"], smart_diff_attrs, " ");

            smartctl_status = 1;
            device_model_family = "";
            device_model_name = "";
            device_serial_number = "";
            device_wwn_naa = "";
            device_wwn_oui = "";
            device_wwn_id = "";
            device_firmware_version = "";
            device_user_capacity_blocks = "";
            device_user_capacity_bytes = "";
            device_logical_block_size = "";
            device_physical_block_size = "";
            device_rotation_rate = "";
            device_form_factor_name = "";
            device_in_smartctl_database = "";
            device_ata_version_string = "";
            device_sata_version_string = "";
            device_time_asctime = "";
            device_time = 0;
            disk_temp_current = "";
            disk_temp_lifetime_min = "";
            disk_temp_lifetime_max = "";
            disk_temp_op_limit_min = "";
            disk_temp_op_limit_max = ENVIRON["TEMP_ALERT_DEFAULT"];
            disk_temp_limit_min = "";
            disk_temp_limit_max = ENVIRON["TEMP_CRITICAL_DEFAULT"];
            smart_status_passed = "";
            sct_temp_interval = "";
            sct_temp_size = "";
            show_alert_notice = 0;

            readSmartDB();
        }

        function makeConstArray(string, array, separator, remove_expr,  _split_array, _i) {
            split(string, _split_array, separator);
            for(_i in _split_array) {
                if(remove_expr != "") {
                    gsub(remove_expr, "", _split_array[_i]);
                };
                array[_split_array[_i]] = "";
            };
        };

        function trim(str) {
            sub(/^[ .;"]*/, "", str);
            sub(/[ .;"]*$/, "", str);
            return str;
        };

        function normalizeSmartValueStr(str) {
            sub(/ .*$/, "", str);
            return str;
        };

        function stripValue(str) {
            sub(/^.*=/, "", str);
            return trim(str);
        };

        function writeLogMessage(id,
                                attr_name,
                                raw_value,
                                value,
                                worst,
                                threshold,
                                when_failed,
                                is_bad,
                                last_value,
                                msg,
                                critical)
        {
            printf "%s -- %s -- %s %s -- %s -- Last=%s (VALUE=%s WORST=%s THRESH=%s WHEN_FAILED=%s) -- %s -- Previous=%s\n",
                DATE, DEVICE_PATH, id, attr_name, msg, raw_value, value,
                worst, threshold, when_failed,
                (is_bad == 1) ? "Have reached the threshold!" : "",
                last_value >>LOG_FILE;
                if(critical == 1) {
                    if(ENVIRON["USE_LOGGER"] == 1) {
                        system(ENVIRON["LOGGER_CMD"] " " ENVIRON["LOGGER_PARAMS"] " \"" DEVICE_PATH " -- " id " " attr_name " -- " msg " -- Last=" raw_value " (VALUE=" value " WORST=" worst " THRESH=" threshold " WHEN_FAILED=" when_failed ") -- " ((is_bad == 1) ? "Have reached the threshold!" : "") " -- Previous=" last_value"\"");
                    };
                    if(ENVIRON["USE_MAIL"] == 1) {
                        printf "%s -- %s -- %s -- %s %s -- %s -- Previous=%s (VALUE=%s WORST=%s THRESH=%s WHEN_FAILED=%s) -- %s -- Previous=%s\n",
                            ENVIRON["HOSTNAME"],  DATE, DEVICE_PATH, id,
                            attr_name, msg, raw_value, value, worst,
                            threshold, when_failed,
                            (is_bad == 1) ? "Have reached the threshold!" : "",
                            last_value >>ENVIRON["MTA_MSG_FILE"];
                    };
                };
        };

        function readSmartDB( _line, _line_array) {
            while((getline _line <DB_FILE) > 0) {
                if(_line ~ /^(tw|tc)/) {
                    continue;
                };
                split(_line, _line_array, " ");
                smart_db[_line_array[5]] = _line;
            };
            close(DB_FILE);
        };

        function writeSmartDB(  id,
                                value,
                                alert_value,
                                ret_array,
                                is_critical,
                                sm_db_status,
                                sm_db_degr_c,
                                sm_db_impr_c,
                                sm_db_last_val,
                                sm_db_reset_c,
                                is_new_db,

                                _is_rev,
                                _impr_val,
                                _degr_val,
                                _stat_val,
                                _last_value,
                                _warn_reset_count)
        {
            _is_rev = (id in smart_rev_attrs) ? 1 : 0;
            _stat_val = sm_db_status;
            _degr_val = 0;
            _impr_val = 0;
            _last_value = sm_db_last_val;
            _warn_reset_count = 0;

            if(is_new_db == 0) {

                if(int(value) > int(sm_db_last_val)) {
                    if(_is_rev == 1) {
                        _impr_val = 1;
                        _stat_val = 1;
                    } else {
                        _degr_val = 1;
                        _stat_val = (is_critical == 0) ? 2 : 3;
                    };
                } else if(int(value) < int(sm_db_last_val)) {
                    if(_is_rev == 1) {
                        _degr_val = 1;
                        _stat_val = (is_critical == 0) ? 2 : 3;
                    } else {
                        _impr_val = 1;
                        _stat_val = 1;
                    };
                } else {
                    _stat_val = (is_critical == 1 && value > 0) ? 4 : 0;
                };
                if((is_critical == 0 && alert_value > 0) &&
                    ((_is_rev != 1 && int(value) >= int(alert_value)) ||
                    (_is_rev == 1 && int(value) <= int(alert_value)))) {
                    _stat_val = 3;
                };

            };

            if(is_critical == 1 && sm_db_status == 3) {

                _warn_reset_count = sm_db_reset_c + 1;

                if(ENVIRON["WARN_AUTO_RESET"] == 1) {
                    # WARN_AUTO_RESET - Auto reset status 3
                    if(_stat_val != 3 && sm_db_reset_c < ENVIRON["WARN_AUTO_RESET_COUNT"]) {
                        _stat_val = sm_db_status;
                    } else {
                        _warn_reset_count = 0;
                    };

                } else {
                    _stat_val = sm_db_status;
                };
            };

            _degr_val += sm_db_degr_c;
            _impr_val += sm_db_impr_c;

            ret_array[0] = _stat_val;
            ret_array[1] = _degr_val;
            ret_array[2] = _impr_val;
            ret_array[3] = _warn_reset_count;

            # DB output
            printf "%s %s %s %s %s %s\n", _stat_val, _degr_val, _impr_val,
                value, id, _warn_reset_count >>DB_FILE_TMP;

        };

        function writeSmartAttrHtml(id,
                                    name,
                                    saved_value,
                                    raw_value,
                                    raw_string,
                                    raw_normalized,
                                    value,
                                    worst,
                                    thresh,
                                    when_failed,
                                    stat_value,
                                    degr_value,
                                    impr_value,
                                    diff_val,
                                    is_bad,
                                    excluded,

                                    _stat_mark,
                                    _data_smart_change,
                                    _attr_title_str)
        {
            _stat_mark = (excluded == 1) ? "" :
                (diff_val > 0) ? "+" diff_val "&uarr;" :
                (diff_val < 0) ? diff_val "&darr;" : "";
            _data_smart_change = (is_bad == 1) ? "thrshld" :
                (stat_value == 5) ? "excluded" :
                (stat_value == 4) ? "nonzero" :
                (stat_value == 3) ? "degr" :
                (stat_value == 2) ? "lowdegr" :
                (stat_value == 1) ? "impr" : "idle";

            _attr_title_str = name;
            gsub("_", " ", _attr_title_str);
            gsub("_", " ", when_failed);

            printf "<tr data-smart-change=\"%s\"> \
                        <td data-tooltip=\"%s\" data-tooltip-hex=\"2\">%s</td> \
                        <td data-smart-attr=\"%s\" data-smart-device=\"%s\">%s</td> \
                        <td>%.3d</td> \
                        <td>%.3d</td> \
                        <td>%.3d</td> \
                        <td>%s</td> \
                        <td data-tooltip=\"%s\" data-tooltip-hex=\"12\">%s</td> \
                        <td>%s</td> \
                        <td>%s</td> \
                        <td%s>%s</td> \
                    </tr>\n", _data_smart_change, id, id, id, DEVICE, _attr_title_str,
                value, worst, thresh,
                (when_failed == "") ? "-" : when_failed,
                raw_value, raw_string, degr_value, impr_value,
                (_stat_mark == "") ? "" : " data-tooltip=\"previous RAW: " saved_value "\"",
                _stat_mark >>ENVIRON["HTML_OUTPUT"];

        };

        function smartDataProcessing(   _line,
                                        _line_array,
                                        _id,
                                        _name,
                                        _raw_value,
                                        _value,
                                        _thresh,
                                        _when_failed,
                                        _alert_value,
                                        _is_bad,
                                        _is_critical,
                                        _excluded,
                                        _noramalized_value,
                                        _ret_array,
                                        _diff_val)
        {
            for (i = 0; i <= 255; i++) {

                if(smart_attrs_array[i".id"] == "") {
                    break;
                };

                _id = smart_attrs_array[i".id"];
                _name = smart_attrs_array[i".name"];
                _raw_value = smart_attrs_array[i".raw.value"];
                _raw_string = smart_attrs_array[i".raw.string"];
                _value = smart_attrs_array[i".value"];
                _worst = smart_attrs_array[i".worst"];
                _thresh = smart_attrs_array[i".thresh"];
                _when_failed = smart_attrs_array[i".when_failed"];
                _alert_value = (_id in smart_temp_attrs) ? ENVIRON["TEMP_ALERT_DEFAULT"] : 0;
                _is_bad = 0;
                _is_critical = (_id in smart_critical_attrs) ? 1 : 0;
                _excluded = 0;
                _noramalized_value = normalizeSmartValueStr(_raw_string);

                # Drop excluded SMART attributes
                if(_id in smart_exclude_attrs) {
                    continue;
                };

                # Read SMART DB
                _sm_db_status = 0;
                _sm_db_degr_c = 0;
                _sm_db_impr_c = 0;
                _sm_db_last_val = _noramalized_value;
                _sm_db_reset_c = 0;
                _is_new_db = 1;

                _line = smart_db[_id];
                split(_line, _line_array, " ");

                if(length(_line_array) > 0) {
                    _sm_db_status = _line_array[1];
                    _sm_db_degr_c = _line_array[2];
                    _sm_db_impr_c = _line_array[3];
                    _sm_db_last_val = _line_array[4];
                    _sm_db_reset_c = _line_array[6];
                    _is_new_db = 0;
                };

                # Difference of values
                _diff_val = (_excluded == 1) ? "" : _noramalized_value - _sm_db_last_val;

                if(_id in smart_disabled_attrs) {
                    _ret_array[0] = 5;
                    _ret_array[1] = "";
                    _ret_array[2] = "";
                    _ret_array[3] = 0;
                    _excluded = 1;
                } else {
                    writeSmartDB(   _id,
                                    _noramalized_value,
                                    _alert_value,
                                    _ret_array,
                                    _is_critical,
                                    _sm_db_status,
                                    _sm_db_degr_c,
                                    _sm_db_impr_c,
                                    _sm_db_last_val,
                                    _sm_db_reset_c,
                                    _is_new_db);
                };

                # Threshold check
                if(int(_value) <= int(_thresh)) {
                    _is_bad = 1;
                };

                # Alert notice
                if(show_alert_notice != 2) {
                    show_alert_notice = (_is_bad == 1) ? 2 :
                        (_is_critical == 1 && _ret_array[0] == 3) ? 1 : show_alert_notice;
                };

                if(_ret_array[0] == 3 && _ret_array[3] == 0) {
                    writeLogMessage(_id,
                                    _name,
                                    _noramalized_value,
                                    _value,
                                    _worst,
                                    _thresh,
                                    _when_failed,
                                    _is_bad,
                                    _sm_db_last_val,
                                    "WARNING!",
                                    1);
                } else if(ENVIRON["LOG_ALL"] == 1 && (_ret_array[0] == 1 || _ret_array[0] == 2)) {
                    writeLogMessage(_id,
                                    _name,
                                    _noramalized_value,
                                    _value,
                                    _worst,
                                    _thresh,
                                    _when_failed,
                                    _is_bad,
                                    _sm_db_last_val,
                                    "INFO",
                                    0);
                };

                # SMART attr line (<tr>)
                writeSmartAttrHtml( _id,
                                    _name,
                                    _sm_db_last_val,
                                    _raw_value,
                                    _raw_string,
                                    _noramalized_value,
                                    _value,
                                    _worst,
                                    _thresh,
                                    _when_failed,
                                    _ret_array[0],
                                    _ret_array[1],
                                    _ret_array[2],
                                    _diff_val,
                                    _is_bad,
                                    _excluded);

                # STDOUT (to environment)
                printf "smart%s=%s ", _id,
                    (_id in smart_diff_attrs) ? _diff_val : _noramalized_value;

            };
        };

        function writeSmartErrorLog( _lt_number, _index, _lt_hours, _err_desc) {
            _index = 0;
            while(1) {
                _lt_number = smart_errors_array[_index ".error_number"];
                _lt_hours = smart_errors_array[_index ".lifetime_hours"];
                _err_desc = smart_errors_array[_index ".error_description"];
                if(_lt_number == "") {
                    break;
                };
                printf "<tr><td>%s</td><td>%s</td><td>%s</td></tr>", _lt_number, _lt_hours, _err_desc >>ENVIRON["HTML_OUTPUT"];
                _index++;
            };
        };

        function writeDevStatHtml( _page, _table, _page_name, _attr_name, _value) {
            _page = 0;
            _page_name = "";

            while(1) {
                _page_name = dev_stat_tables[_page ",,page"];
                if(_page_name == "") {
                    break;
                };

                printf "<table class=\"two-cols-table\"> \
                        <caption>%s</caption><tbody>", _page_name >>ENVIRON["HTML_OUTPUT"];

                _table = 0;
                while(1) {
                    _attr_name = dev_stat_tables[_page "," _table ",name"];
                    _value = dev_stat_tables[_page "," _table ",value"];
                    _table++;

                    if(_attr_name == "") {
                        break;
                    };

                    printf "<tr><td>%s:</td><td%s>%s</td></tr>",
                        _attr_name,
                        (_attr_name == "Percentage Used Endurance Indicator") ?
                        " data-bar=\"" _value "\"" : "",
                        (_attr_name == "Percentage Used Endurance Indicator") ?
                        _value "%" : _value >>ENVIRON["HTML_OUTPUT"];

                };
                print "</tbody></table>" >>ENVIRON["HTML_OUTPUT"];
                _page++;
            };
        };

        {
            # Smartctl exit status
            if($0 ~ /^json\.smartctl\.exit_status/) {
                smartctl_status = stripValue($0);
            };

            # Device info
            if($0 ~ /^json\.model_family/) {
                device_model_family = stripValue($0);
            };
            if($0 ~ /^json\.model_name/) {
                device_model_name = stripValue($0);
            };
            if($0 ~ /^json\.serial_number/) {
                device_serial_number = stripValue($0);
            };
            if($0 ~ /^json\.wwn\.naa/) {
                device_wwn_naa = stripValue($0);
            };
            if($0 ~ /^json\.wwn\.oui/) {
                device_wwn_oui = stripValue($0);
            };
            if($0 ~ /^json\.wwn\.id/) {
                device_wwn_id = stripValue($0);
            };
            if($0 ~ /^json\.firmware_version/) {
                device_firmware_version = stripValue($0);
            };
            if($0 ~ /^json\.user_capacity\.bytes/) {
                device_user_capacity_bytes = stripValue($0);
            };
            if($0 ~ /^json\.user_capacity\.blocks/) {
                device_user_capacity_blocks = stripValue($0);
            };
            if($0 ~ /^json\.logical_block_size/) {
                device_logical_block_size = stripValue($0);
            };
            if($0 ~ /^json\.physical_block_size/) {
                device_physical_block_size = stripValue($0);
            };
            if($0 ~ /^json\.rotation_rate/) {
                device_rotation_rate = stripValue($0);
            };
            if($0 ~ /^json\.form_factor\.name/) {
                device_form_factor_name = stripValue($0);
            };
            if($0 ~ /^json\.in_smartctl_database/) {
                device_in_smartctl_database = stripValue($0);
            };
            if($0 ~ /^json\.ata_version\.string/) {
                device_ata_version_string = stripValue($0);
            };
            if($0 ~ /^json\.sata_version\.string/) {
                device_sata_version_string = stripValue($0);
            };
            if($0 ~ /^json\.local_time\.asctime/) {
                device_time_asctime = stripValue($0);
            };
            if($0 ~ /^json\.local_time\.time_t/) {
                device_time = stripValue($0);
            };

            # Temperature
            if($0 ~ /^json\.temperature\.current/) {
                disk_temp_current = stripValue($0);
            };
            if($0 ~ /^json\.temperature\.lifetime_min/) {
                disk_temp_lifetime_min = stripValue($0);
            };
            if($0 ~ /^json\.temperature\.lifetime_max/) {
                disk_temp_lifetime_max = stripValue($0);
            };
            if($0 ~ /^json\.temperature\.op_limit_min/) {
                disk_temp_op_limit_min = stripValue($0);
            };
            if($0 ~ /^json\.temperature\.op_limit_max/) {
                disk_temp_op_limit_max = stripValue($0);
            };
            if($0 ~ /^json\.temperature\.limit_min/) {
                disk_temp_limit_min = stripValue($0);
            };
            if($0 ~ /^json\.temperature\.limit_max/) {
                disk_temp_limit_max = stripValue($0);
            };

            # SMART status
            if($0 ~ /^json\.smart_status\.passed/) {
                smart_status_passed = stripValue($0);
            };

            # SMART attrs
            if($0 ~ /^json\.ata_smart_attributes\.table\[[0-9]+\]/) {
                match($0, /\[[0-9]+\]/);
                num = substr($0, RSTART + 1, RLENGTH - 2);
                param = substr($0, RSTART + RLENGTH);
                split(param, p_arr, " = ");
                smart_attrs_array[num "." trim(p_arr[1])] = trim(p_arr[2]);
                #smart_attrs_array[num trim(p_arr[1])] = trim(p_arr[2]);
            };

            # SMART error log
            if($0 ~ /^json\.ata_smart_error_log\.summary\.table\[[0-9]+\]\.(error_number|lifetime_hours|error_description)/) {
                match($0, /\[[0-9]+\]/);
                num = substr($0, RSTART + 1, RLENGTH - 2);
                param = substr($0, RSTART + RLENGTH);
                split(param, p_arr, " = ");
                smart_errors_array[num "." trim(p_arr[1])] = trim(p_arr[2]);
            };

            # SCT temperature
            if(ENVIRON["SCT_TEMP_HISTORY"] != 0) {
                if($0 ~ /^json\.ata_sct_temperature_history\.logging_interval_minutes/) {
                    sct_temp_interval = stripValue($0);
                };
                if($0 ~ /^json\.ata_sct_temperature_history\.size/) {
                    sct_temp_size = stripValue($0);
                };
                if($0 ~ /^json\.ata_sct_temperature_history\.table\[[0-9]+\]/) {
                    match($0, /\[[0-9]+\]/);
                    num = substr($0, RSTART + 1, RLENGTH - 2);
                    val = substr($0, (RSTART + 2) + RLENGTH);
                    sct_temp_array[num] = trim(val);
                };
            };

            # Device statistics
            if($0 ~ /^json\.ata_device_statistics\.pages\[[0-9]+\](\.table\[[0-9]+\]|\.name)/) {
                match($0, /pages\[[0-9]+\]/);
                page = substr($0, RSTART + 6, RLENGTH - 7);

                if(match($0, /table\[[0-9]+\]/) != 0) {
                    table = substr($0, RSTART + 6, RLENGTH - 7);
                    param = substr($0, RSTART + RLENGTH);
                    split(param, p_arr, " = ");
                    dev_stat_tables[page "," table "," trim(p_arr[1])] = trim(p_arr[2]);
                } else {
                    split($0, p_arr, " = ");
                    dev_stat_tables[page ",,page"] = trim(p_arr[2]);
                };
            };

        }

        END {
            # Device tab
            printf "<section class=\"device-tab\" data-device=\"%s\" data-tab=\"%d\" data-tab-title=\"%s\"> \
                <div class=\"tab-flex-container\">\n",
                DEVICE, DEVICE_NUM, DEVICE_PATH >>ENVIRON["HTML_OUTPUT"];

            # Device header
            printf "<header class=\"device-header\">%s | %s | Last check: %s</header>\n",
                DEVICE_PATH, device_model_name, DATE >>ENVIRON["HTML_OUTPUT"];

            # Smartctl exit status
            if(smartctl_status == 1 || smartctl_status == 2) {
                print "<section class=\"device-error\"> \
                    <p class=\"center\"><strong> \
                        Error trying to get S.M.A.R.T. data from device! \
                    </strong></p></section>\n" >>ENVIRON["HTML_OUTPUT"];

                # STDOUT (to environment)
                printf "_device_error=1 ";
                exit 1;
            } else {
                # STDOUT (to environment)
                printf "_device_error=0 ";
            };

            # SCT temperature JS
            if(ENVIRON["SCT_TEMP_HISTORY"] != 0) {
                printf "<script async=\"false\">\nSCT_DEVICES_ARRAY.push([\n\047%s\047,\n%s,\n%s,\n%s,\n%s,\n%s,\n[",
                    DEVICE, sct_temp_size, sct_temp_interval, device_time,
                    disk_temp_op_limit_max, disk_temp_limit_max >>ENVIRON["HTML_OUTPUT"];

                for(i = 0; i < length(sct_temp_array); i++) {
                    printf "%s,", sct_temp_array[i] >>ENVIRON["HTML_OUTPUT"];
                };

                print "]\n]);</script>\n" >>ENVIRON["HTML_OUTPUT"];
            };

            # SMART table
            print "<section id=\"smart-table\">\n \
                <header class=\"section-header\">S.M.A.R.T. attributes</header>\n" >>ENVIRON["HTML_OUTPUT"];

            if(smart_status_passed != "") {
                printf "<div class=\"smart-status\" data-smart-status=\"passed\"> \
                    <span class=\"label\">SMART overall-health self-assessment test result: %s</span> \
                </div>",
                    (smart_status_passed == "true") ? "passed" : "failed" >>ENVIRON["HTML_OUTPUT"];
            };

            if(length(smart_attrs_array) > 0) {
                print "<table class=\"smart-table\"> \
                    <thead> \
                        <tr> \
                            <th scope=\"col\">Id#</th> \
                            <th scope=\"col\">Attribute name</th> \
                            <th scope=\"col\">VALUE</th> \
                            <th scope=\"col\">WORST</th> \
                            <th scope=\"col\">THRESH</th> \
                            <th scope=\"col\">WHEN FAILED</th> \
                            <th scope=\"col\">RAW</th> \
                            <th scope=\"col\">Degr. count</th> \
                            <th scope=\"col\">Improv. count</th> \
                            <th scope=\"col\">Last change</th> \
                        </tr> \
                    </thead> \
                    <tbody>" >>ENVIRON["HTML_OUTPUT"];
                smartDataProcessing();
                print "</tbody></table>\n" >>ENVIRON["HTML_OUTPUT"];
            };

            print "</section>" >>ENVIRON["HTML_OUTPUT"];

            # SMART graphs
            if(ENVIRON["USE_RRD"] != 0) {
                printf "<section id=\"smart-graph\"> \
                    <header class=\"section-header\">S.M.A.R.T. graphs</header> \
                    <div class=\"graph-container\" data-graph-device=\"%s\"> \
                        <ul class=\"attrs-links\"></ul> \
                        <ul class=\"graph-links\"></ul> \
                        <figure></figure> \
                </div></section>", DEVICE >>ENVIRON["HTML_OUTPUT"];
            };

            # SMART error log
            if(length(smart_errors_array) > 0) {
                print "<section id=\"smart-error-log\"> \
                    <header class=\"section-header\">S.M.A.R.T. Error Log</header> \
                    <div class=\"scroll-container\"> \
                        <table class=\"smart-errors-table\"><thead> \
                        <tr><th scope=\"col\">Error number</th> \
                        <th scope=\"col\">Lifetime hours</th> \
                        <th scope=\"col\">Description</th></tr> \
                    </thead><tbody></div>" >>ENVIRON["HTML_OUTPUT"];
                writeSmartErrorLog();
                print "</tbody></table></section>" >>ENVIRON["HTML_OUTPUT"];
            };

            # Temperature
            printf "<section id=\"temperature\"> \
                <header class=\"section-header\">Temperature &#176;C</header> \
                <table class=\"two-cols-table\"><tbody> \
                    <tr><td>Current:</td><td>%s</td></tr> \
                    <tr><td>Lifetime min:</td><td>%s</td></tr> \
                    <tr><td>Lifetime max:</td><td>%s</td></tr> \
                    <tr><td>Recommended min:</td><td>%s</td></tr> \
                    <tr><td>Recommended max:</td><td>%s</td></tr> \
                    <tr><td>Limit min:</td><td>%s</td></tr> \
                    <tr><td>Limit max:</td><td>%s</td></tr> \
                </tbody></table></section>\n", disk_temp_current,
                    disk_temp_lifetime_min, disk_temp_lifetime_max,
                    disk_temp_op_limit_min, disk_temp_op_limit_max,
                    disk_temp_limit_min, disk_temp_limit_max >>ENVIRON["HTML_OUTPUT"];

            # SCT temperature history
            if(ENVIRON["SCT_TEMP_HISTORY"] != 0) {
                printf "<section id=\"sct-temp\"> \
                    <header class=\"section-header\">SCT temperature history</header> \
                    <figure class=\"sct-temp-graph-container\" data-sct-device=\"%s\"></figure> \
                    <div class=\"sct-temp-container scroll-container\" data-sct-device=\"%s\"></div> \
                </section>", DEVICE, DEVICE >>ENVIRON["HTML_OUTPUT"];
            };

            # Device statistics
            if(length(dev_stat_tables) > 0) {
                print "<section id=\"device-stat\"> \
                    <header class=\"section-header\">Device statistics</header>" >>ENVIRON["HTML_OUTPUT"];
                writeDevStatHtml();
                print "</section>" >>ENVIRON["HTML_OUTPUT"];
            };

            # Device info
            printf "<section id=\"device-info\"> \
                <header class=\"section-header\">Device info</header> \
                <table class=\"two-cols-table\"><tbody> \
                    <tr><td>Model Family:</td><td>%s</td></tr> \
                    <tr><td>Device Model:</td><td>%s</td></tr> \
                    <tr><td>Serial Number:</td><td>%s</td></tr> \
                    <tr><td>LU WWN Device Id:</td><td>%x %x %x</td></tr> \
                    <tr><td>Firmware Version:</td><td>%s</td></tr> \
                    <tr><td>User Capacity:</td><td>%s bytes [%s Gb] (%s blocks)</td></tr> \
                    <tr><td>Sector Size (logical/physical):</td><td>%s bytes / %s bytes</td></tr> \
                    <tr><td>Rotation Rate:</td><td>%s</td></tr> \
                    <tr><td>Form Factor:</td><td>%s</td></tr> \
                    <tr><td>Device is:</td><td>%s</td></tr> \
                    <tr><td>ATA Version is:</td><td>%s</td></tr> \
                    <tr><td>SATA Version is:</td><td>%s</td></tr> \
                    <tr><td>Local Time is:</td><td>%s</td></tr> \
                </tbody></table></section>",
                device_model_family, device_model_name,
                device_serial_number, device_wwn_naa,
                device_wwn_oui, device_wwn_id,
                device_firmware_version, device_user_capacity_bytes,
                int(device_user_capacity_bytes / 1e9),
                device_user_capacity_blocks, device_logical_block_size,
                device_physical_block_size,
                (device_rotation_rate == 0) ? "Solid State Device" :
                    device_rotation_rate,
                device_form_factor_name,
                (device_in_smartctl_database == "true") ?
                    "In smartctl database [for details use: -P show]" :
                    "Not in smartctl database [for details use: -P showall]",
                device_ata_version_string, device_sata_version_string,
                device_time_asctime >>ENVIRON["HTML_OUTPUT"];

            # DB output (temp: warning, critical)
            printf "tw %s\ntc %s\n", disk_temp_op_limit_max, disk_temp_limit_max >>DB_FILE_TMP;

            # Alert notice
            if(show_alert_notice != 0) {
                printf "<script type=\"text/javascript\">if(showAlert !== 2) showAlert = %d</script>\n",
                    show_alert_notice >>ENVIRON["HTML_OUTPUT"];
            };

        }' && mv -f ${_db_file}.tmp $_db_file)

        [ $USE_FDISK = "1" ] && MakePartitionsInfo $_device_path

        echo "</div></section>" >> $HTML_OUTPUT;

        if [ $USE_RRD = "1" -a $_device_error = "0" -a $# -eq 1 -a "$1" = "rrd" ]; then
            local _rrd_db_file="${RRD_DB_DIR}/${_device}.${RRD_DB_EXT}"
            [ -e "$_rrd_db_file" ] || MakeRRDDB $_rrd_db_file
            FillRRDDB $_rrd_db_file
            MakeRRDGraph $_rrd_db_file $_device
        fi

        for _attr in $RRD_SMART_ATTRS
        do
            unset "smart${_attr}"
        done

        _device_error=0
        _devices_counter=$(($_devices_counter + 1))

    done
}

RunMailer() {
    if [ -s "$MTA_MSG_FILE" -a -x "$MAILER_SCRIPT" ]; then
        $MAILER_SCRIPT "$MTA_MSG_FILE" $1
    fi
    [ -e "$MTA_MSG_FILE" ] && rm -f $MTA_MSG_FILE
}

MainRun() {
    local _dir

    for _dir in "$SCRIPT_DATA_DIR" "$DB_DIR" "$LOG_DIR" "$HTML_DIR" "$RRD_DB_DIR" "$RRD_GRAPH_DIR"
    do
        if [ ! -d "$_dir" ]; then
            mkdir -p "$_dir" && echo " + New dir ${_dir} ..."
        fi
    done

    [ -e "$MTA_MSG_FILE" ] && rm -f $MTA_MSG_FILE
    MakeHtmlHeader
    MakeDevicesInfo $1
    MakeHtmlFooter
    [ $USE_MAIL = "1" ] && RunMailer &> /dev/null
}

############################### Main section ##################################

case $1 in
    resetwarn)
        ResetSMARTDBAll warn
    ;;
    resetcount)
        ResetSMARTDBAll count
    ;;
    makerrdgraph)
        if [ $USE_RRD = "1" ]; then

            for device_path in $DEVICES
            do
                [ -b "$device_path" ] || continue
                device=`echo "$device_path" | $AWK_CMD -F "/" '{print $NF}'`
                rrd_db_file="${RRD_DB_DIR}/${device}.${RRD_DB_EXT}"
                MakeRRDGraph $rrd_db_file $device
            done

        fi
    ;;
    mailtest)
        if [ $USE_MAIL = "1" ]; then
            echo "${HOSTNAME} -- This is a test message..." > $MTA_MSG_FILE
            RunMailer debug
        fi
    ;;
    norrd)
        MainRun
    ;;
    -h|--help|help)
        Help
    ;;
    *)
        MainRun rrd
    ;;
esac

exit 0;
